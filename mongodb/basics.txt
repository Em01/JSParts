Document or no sql database.
There is no such thing as schema or design. You simply store the json object in mongodb.

To create a Schema:

const course = new mongoose.Schema({
  name: String
})

To Create a model which is essentially a class:

const Course = mongoose.model('Course', courseSchema) //class
const course = new Course({
  name: 'Node.js Course'
})

retrieve documents:
* .find: gets a list of documents
* .findById: by id
* .findOne: Returns a single document

async function getCourses() {
  const courses = await Course
  .find({ author: 'Mosh', isPublished: true })
  .limit(10)
  .sort({ name: 1 }) //1 indicates ascending order, -1 is descending
  .select({ name: 1, tags: 1})
  console.log(courses)
}

* Comparison operators:
// available in mongo and mongoose
eq: equal
ne: not equal
gt: greater than
gte: greater than or equal to
lt: less than
lte: less than or equal to
in: in
nin: not in

.find({ price: { $gte: 10, lte: 20 } })
.find({ price: { $in: [10, 15, 20] } }) //specific values



* Logical operators:
// or
// and

.find()
.or([ { author: 'Mosh' }, { isPublished: true} ])
.and([])

regexp:
^: string that starts with something
/^Mosh/

ends with: /Wi$/i     //the i signifies not case sensitive

Contains:   .find({ author: /.*Mosh.*/i })
.* means contains 0 or more characters before or after and we dont care what they are.


* Count:
number of documents that match our filter.
.count()


* Skip:
Implements Pagination

mongoimport --db mongo-excercises --collection courses --file excercise-data.json --jsonArray


* Two ways to update a course in mongoDb:
- query first:
.findById()
modify its properties
then call the save method

-the alternative approach is update first
update directly
optionally get the updated document as well.


* Query First:
//QueryFirst: use when you receive an input from the client and you want to make sure the update is a valid operation
async function updateCourse(id) {
  const course = await Course.findById(id);
  if (!course) return;
  course.isPublished = true
  course.author = 'Anoter Author'

  // course.set({
  //   author: 'another author'
  // })

  const result = await course.save()
  console.log(result)

}

updateCourse("5b3e2977e7cb2808d987bd7f")
